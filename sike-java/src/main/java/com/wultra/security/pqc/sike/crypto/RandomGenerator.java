/*
 * Copyright 2020 Wultra s.r.o.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wultra.security.pqc.sike.crypto;

import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;

/**
 * Random generator for key material.
 *
 * @author Roman Strobl, roman.strobl@wultra.com
 */
public class RandomGenerator {

    private volatile SecureRandom secureRandom;

    /**
     * Default random generator constructor.
     */
    public RandomGenerator() {
    }

    /**
     * Random generator constructor with provided SecureRandom.
     * @param secureRandom SecureRandom implementation to use.
     */
    public RandomGenerator(SecureRandom secureRandom) {
        this.secureRandom = secureRandom;
    }

    /**
     * Generate random bytes.
     * @param length Length of generated byte array.
     * @return Byte array with random bytes.
     * @throws NoSuchProviderException Thrown in case Bouncy Castle provider is not available.
     * @throws NoSuchAlgorithmException Thrown in case random generator algorithm is not available.
     */
    public byte[] generateRandomBytes(int length) throws NoSuchProviderException, NoSuchAlgorithmException {
        SecureRandom localSecureRandom = secureRandom;

        if (localSecureRandom == null) {
            synchronized (RandomGenerator.class) {
                localSecureRandom = secureRandom;
                if (localSecureRandom == null)
                    // Use SecureRandom implementation from Bouncy Castle library, it is slower,
                    // however it reseeds periodically and it is quantum safe. The initialization is lazy
                    // to allow dynamic Bouncy Castle provider initialization and to allow instantiation
                    // of this class in fields.
                    secureRandom = localSecureRandom = SecureRandom.getInstance("DEFAULT", "BC");
            }
        }

        byte[] randomBytes = new byte[length];
        localSecureRandom.nextBytes(randomBytes);
        return randomBytes;
    }

}
