/*
 * Copyright 2020 Wultra s.r.o.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wultra.security.pqc.sike;

import com.wultra.security.pqc.sike.crypto.KeyGenerator;
import com.wultra.security.pqc.sike.crypto.Sidh;
import com.wultra.security.pqc.sike.math.api.Fp2Element;
import com.wultra.security.pqc.sike.model.ImplementationType;
import com.wultra.security.pqc.sike.model.Party;
import com.wultra.security.pqc.sike.model.SidhPrivateKey;
import com.wultra.security.pqc.sike.model.SidhPublicKey;
import com.wultra.security.pqc.sike.param.SikeParam;
import com.wultra.security.pqc.sike.param.SikeParamP434;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.junit.jupiter.api.Test;

import java.security.*;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * Test of SIDH key exchange.
 *
 * @author Roman Strobl, roman.strobl@wultra.com
 */
class SidhReferenceTest {

    static {
        Security.addProvider(new BouncyCastleProvider());
    }

    @Test
    void testSidhReferenceVsOptimized() throws GeneralSecurityException {
        SikeParam sikeParamReference = new SikeParamP434(ImplementationType.REFERENCE);
        SikeParam sikeParamOptimized = new SikeParamP434(ImplementationType.OPTIMIZED);
        System.out.println("Prime: " + sikeParamReference.getPrime());
        KeyGenerator keyGenerator = new KeyGenerator(sikeParamReference);
        Sidh sidhReference = new Sidh(sikeParamReference);
        Sidh sidhOptimized = new Sidh(sikeParamOptimized);
        System.out.println("----------------------------------------");
        KeyPair keyPairA = keyGenerator.generateKeyPair(Party.ALICE);
        System.out.println("Alice's keypair:");
        System.out.println("Private key: " + keyPairA.getPrivate());
        System.out.println("Public key: " + keyPairA.getPublic());

        KeyPair keyPairB = keyGenerator.generateKeyPair(Party.BOB);
        System.out.println("Bob's keypair:");
        System.out.println("Private key: " + keyPairB.getPrivate());
        System.out.println("Public key: " + keyPairB.getPublic());

        // Bob's public key is sent to Alice (reference)
        Fp2Element secretARef = sidhReference.generateSharedSecret(Party.ALICE, keyPairA.getPrivate(), keyPairB.getPublic());
        System.out.println("Shared secret generated by Alice (reference): " + secretARef);

        // Alice's public key is sent to Bob (reference)
        Fp2Element secretBRef = sidhReference.generateSharedSecret(Party.BOB, keyPairB.getPrivate(), keyPairA.getPublic());
        System.out.println("Shared secret generated by Bob (reference):   " + secretBRef);

        PrivateKey privA = new SidhPrivateKey(sikeParamOptimized, Party.ALICE, keyPairA.getPrivate().getEncoded());
        PublicKey pubA = new SidhPublicKey(sikeParamOptimized, keyPairA.getPublic().getEncoded());
        PrivateKey privB = new SidhPrivateKey(sikeParamOptimized, Party.BOB, keyPairB.getPrivate().getEncoded());
        PublicKey pubB = new SidhPublicKey(sikeParamOptimized, keyPairB.getPublic().getEncoded());

        // Bob's public key is sent to Alice (optimized)
        Fp2Element secretAOpti = sidhOptimized.generateSharedSecret(Party.ALICE, privA, pubB);
        System.out.println("Shared secret generated by Alice (optimized): " + secretAOpti);

        // Alice's public key is sent to Bob (optimized)
        Fp2Element secretBOpti = sidhOptimized.generateSharedSecret(Party.BOB, privB, pubA);
        System.out.println("Shared secret generated by Bob (optimized):   " + secretBOpti);

        boolean matchRef = Arrays.equals(secretARef.getEncoded(), secretBRef.getEncoded());
        System.out.println("Secrets match (encoded - reference): " + matchRef);
        assertTrue(matchRef, "Secrets do not match");

        boolean matchOpti = Arrays.equals(secretAOpti.getEncoded(), secretBOpti.getEncoded());
        System.out.println("Secrets match (encoded - optimized): " + matchOpti);
        assertTrue(matchOpti, "Secrets do not match");

        boolean matchMixed1 = Arrays.equals(secretARef.getEncoded(), secretBOpti.getEncoded());
        System.out.println("Secrets match (encoded - mixed variant 1): " + matchMixed1);
        assertTrue(matchMixed1, "Secrets do not match");

        boolean matchMixed2 = Arrays.equals(secretAOpti.getEncoded(), secretBRef.getEncoded());
        System.out.println("Secrets match (encoded - mixed variant 2): " + matchMixed2);
        assertTrue(matchMixed2, "Secrets do not match");

        boolean matchRefOctets = secretARef.toOctetString().equals(secretBRef.toOctetString());
        System.out.println("Secrets match (octets - reference): " + matchRefOctets);
        assertTrue(matchRefOctets, "Secrets do not match");

        boolean matchOptiOctets = secretAOpti.toOctetString().equals(secretBOpti.toOctetString());
        System.out.println("Secrets match (octets - optimized): " + matchOptiOctets);
        assertTrue(matchOptiOctets, "Secrets do not match");

        boolean matchMixedOctets1 = secretARef.toOctetString().equals(secretBOpti.toOctetString());
        System.out.println("Secrets match (octets - mixed variant 1): " + matchMixedOctets1);
        assertTrue(matchMixedOctets1, "Secrets do not match");

        boolean matchMixedOctets2 = secretAOpti.toOctetString().equals(secretBRef.toOctetString());
        System.out.println("Secrets match (octets - mixed variant 2): " + matchMixedOctets2);
        assertTrue(matchMixedOctets2, "Secrets do not match");

    }

    @Test
    void testSidhReferenceServerOptimizedClient() throws GeneralSecurityException {
        SikeParam sikeParamReference = new SikeParamP434(ImplementationType.REFERENCE);
        SikeParam sikeParamOptimized = new SikeParamP434(ImplementationType.OPTIMIZED);
        System.out.println("Prime: " + sikeParamReference.getPrime());
        KeyGenerator keyGeneratorReference = new KeyGenerator(sikeParamReference);
        KeyGenerator keyGeneratorOptimized = new KeyGenerator(sikeParamOptimized);
        Sidh sidhReference = new Sidh(sikeParamReference);
        Sidh sidhOptimized = new Sidh(sikeParamOptimized);
        System.out.println("----------------------------------------");
        KeyPair keyPairA = keyGeneratorReference.generateKeyPair(Party.ALICE);
        System.out.println("Alice's keypair:");
        System.out.println("Private key: " + keyPairA.getPrivate());
        System.out.println("Public key: " + keyPairA.getPublic());

        KeyPair keyPairB = keyGeneratorOptimized.generateKeyPair(Party.BOB);
        System.out.println("Bob's keypair:");
        System.out.println("Private key: " + keyPairB.getPrivate());
        System.out.println("Public key: " + keyPairB.getPublic());

        // Bob's public key is sent to Alice
        Fp2Element secretARef = sidhReference.generateSharedSecret(Party.ALICE, keyPairA.getPrivate(), new SidhPublicKey(sikeParamReference, keyPairB.getPublic().getEncoded()));
        System.out.println("Shared secret generated by Alice: " + secretARef);

        // Alice's public key is sent to Bob
        Fp2Element secretBOpti = sidhOptimized.generateSharedSecret(Party.BOB, keyPairB.getPrivate(), new SidhPublicKey(sikeParamOptimized, keyPairA.getPublic().getEncoded()));
        System.out.println("Shared secret generated by Bob:   " + secretBOpti);

        boolean matchEncoded = Arrays.equals(secretARef.getEncoded(), secretBOpti.getEncoded());
        System.out.println("Secrets match (encoded): " + matchEncoded);
        assertTrue(matchEncoded, "Secrets do not match");

        boolean matchOctets = secretARef.toOctetString().equals(secretBOpti.toOctetString());
        System.out.println("Secrets match (octets): " + matchOctets);
        assertTrue(matchOctets, "Secrets do not match");
    }

    @Test
    void testSidhOptimizedServerReferenceClient() throws GeneralSecurityException {
        SikeParam sikeParamReference = new SikeParamP434(ImplementationType.REFERENCE);
        SikeParam sikeParamOptimized = new SikeParamP434(ImplementationType.OPTIMIZED);
        System.out.println("Prime: " + sikeParamReference.getPrime());
        KeyGenerator keyGeneratorReference = new KeyGenerator(sikeParamReference);
        KeyGenerator keyGeneratorOptimized = new KeyGenerator(sikeParamOptimized);
        Sidh sidhReference = new Sidh(sikeParamReference);
        Sidh sidhOptimized = new Sidh(sikeParamOptimized);
        System.out.println("----------------------------------------");
        KeyPair keyPairA = keyGeneratorOptimized.generateKeyPair(Party.ALICE);
        System.out.println("Alice's keypair:");
        System.out.println("Private key: " + keyPairA.getPrivate());
        System.out.println("Public key: " + keyPairA.getPublic());

        KeyPair keyPairB = keyGeneratorReference.generateKeyPair(Party.BOB);
        System.out.println("Bob's keypair:");
        System.out.println("Private key: " + keyPairB.getPrivate());
        System.out.println("Public key: " + keyPairB.getPublic());

        // Bob's public key is sent to Alice
        Fp2Element secretAOpti = sidhOptimized.generateSharedSecret(Party.ALICE, keyPairA.getPrivate(), new SidhPublicKey(sikeParamOptimized, keyPairB.getPublic().getEncoded()));
        System.out.println("Shared secret generated by Alice: " + secretAOpti);

        // Alice's public key is sent to Bob
        Fp2Element secretBRef = sidhReference.generateSharedSecret(Party.BOB, keyPairB.getPrivate(), new SidhPublicKey(sikeParamReference, keyPairA.getPublic().getEncoded()));
        System.out.println("Shared secret generated by Bob:   " + secretBRef);

        boolean matchEncoded = Arrays.equals(secretAOpti.getEncoded(), secretBRef.getEncoded());
        System.out.println("Secrets match (encoded): " + matchEncoded);
        assertTrue(matchEncoded, "Secrets do not match");

        boolean matchOctets = secretAOpti.toOctetString().equals(secretBRef.toOctetString());
        System.out.println("Secrets match: " + matchOctets);
        assertTrue(matchOctets, "Secrets do not match");
    }

}
